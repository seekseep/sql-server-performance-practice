
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.1
 * Query Engine version: 9b628578b3b7cae625e8c927178f15a170e74a9c
 */
Prisma.prismaVersion = {
  client: "6.10.1",
  engine: "9b628578b3b7cae625e8c927178f15a170e74a9c"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable',
  Snapshot: 'Snapshot'
});

exports.Prisma.CustomerScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name',
  Address: 'Address',
  Email: 'Email'
};

exports.Prisma.EmployeeScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name'
};

exports.Prisma.ProductScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name'
};

exports.Prisma.ProductStockScalarFieldEnum = {
  Id: 'Id',
  ProductId: 'ProductId',
  WarehouseId: 'WarehouseId',
  Used: 'Used'
};

exports.Prisma.ReceivingAchievementScalarFieldEnum = {
  Id: 'Id',
  ReceivedAt: 'ReceivedAt',
  EmployeeId: 'EmployeeId'
};

exports.Prisma.ReceivingAchievementDetailScalarFieldEnum = {
  Id: 'Id',
  ReceivingAchievementId: 'ReceivingAchievementId',
  ProductStockId: 'ProductStockId'
};

exports.Prisma.ShipmentAchievementScalarFieldEnum = {
  Id: 'Id',
  ShippedAt: 'ShippedAt',
  EmployeeId: 'EmployeeId'
};

exports.Prisma.ShipmentAchievementDetailScalarFieldEnum = {
  Id: 'Id',
  ShipmentAchievementId: 'ShipmentAchievementId',
  ProductStockId: 'ProductStockId',
  ShipmentPlanDetailId: 'ShipmentPlanDetailId'
};

exports.Prisma.ShipmentPlanScalarFieldEnum = {
  Id: 'Id',
  CustomerId: 'CustomerId'
};

exports.Prisma.ShipmentPlanDetailScalarFieldEnum = {
  Id: 'Id',
  ShipmentPlanId: 'ShipmentPlanId',
  ProductId: 'ProductId',
  Quantity: 'Quantity'
};

exports.Prisma.TreatmentAchievementScalarFieldEnum = {
  Id: 'Id',
  TreatedAt: 'TreatedAt',
  EmployeeId: 'EmployeeId'
};

exports.Prisma.TreatmentAchievementDetailScalarFieldEnum = {
  Id: 'Id',
  TreatmentAchievementId: 'TreatmentAchievementId',
  TreatmentPlanDetailId: 'TreatmentPlanDetailId',
  UsedProductStockId: 'UsedProductStockId',
  ProducedProductStockId: 'ProducedProductStockId'
};

exports.Prisma.TreatmentPlanScalarFieldEnum = {
  Id: 'Id'
};

exports.Prisma.TreatmentPlanDetailScalarFieldEnum = {
  Id: 'Id',
  TreatmentPlanId: 'TreatmentPlanId',
  ProductStockId: 'ProductStockId',
  Quantity: 'Quantity'
};

exports.Prisma.WarehouseScalarFieldEnum = {
  Id: 'Id',
  Name: 'Name'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};


exports.Prisma.ModelName = {
  Customer: 'Customer',
  Employee: 'Employee',
  Product: 'Product',
  ProductStock: 'ProductStock',
  ReceivingAchievement: 'ReceivingAchievement',
  ReceivingAchievementDetail: 'ReceivingAchievementDetail',
  ShipmentAchievement: 'ShipmentAchievement',
  ShipmentAchievementDetail: 'ShipmentAchievementDetail',
  ShipmentPlan: 'ShipmentPlan',
  ShipmentPlanDetail: 'ShipmentPlanDetail',
  TreatmentAchievement: 'TreatmentAchievement',
  TreatmentAchievementDetail: 'TreatmentAchievementDetail',
  TreatmentPlan: 'TreatmentPlan',
  TreatmentPlanDetail: 'TreatmentPlanDetail',
  Warehouse: 'Warehouse'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
